yggdrasil {

    // 配置文件版本 (不要修改)
    version = "${project.version}"

    // 应用程序 Ktor netty 环境配置
    netty {

        // 存储无法立即处理的 ApplicationCall 实例的队列大小（默认：16）
        requestQueueLimit = 16

        // 来自同一 http 管道的并发运行请求数（默认：10）
        runningLimit = 10

        // 不要创建单独的呼叫事件组并重新使用工作组来处理呼叫（默认：false）
        shareWorkGroup = false

        // 向客户端发送响应的超时（以秒为单位）（默认：10秒）
        responseWriteTimeoutSeconds = 10
    }

    // 应用程序 Http 配置
    http {

        // 自定义默认 Http 响应头
        // 不过某些特定的响应头不应该被重写
        // 且不应该盲目添加过多的响应头，都是占用传输数据的
        headers {
            Server = "Yggdrasil Server"
        }

        // TODO 用于让服务器支持 https 的配置, 待实现
        ssl {
        }
    }

    // 应用程序存储配置
    storage {

        // 可用的存储类型: [SQLite, MySQL]
        type = "SQLite"

        // 可用的密码加密类型: [Raw, Md5, Sha1, Sha256, Sha512, SaltedMd5, SaltedSha1, SaltedSha256, SaltedSha512]
        passwordEncryption = "SaltedSha1"

        // SQLite 数据库配置
        sqlite {

            // SQLite 数据库文件路径
            // 支持绝对路径和相对路径
            // 假设：D:/database/yggdrasil.db 那么在 D 盘的 database 目录中存储
            // 假设：/db/yggdrasil.db 那么在当前程序运行目录的 db 目录中存储
            // 默认在当前程序运行目录
            database = "yggdrasil.db"
        }

        // MySQL 数据库配置
        mysql {

            // MySQL 数据库协同程序的线程数量（默认：5）
            threads = 5

            // MySQL 数据库的线程池名称
            poolName = null

            // MySQL 数据库的连接地址：主机:端口
            address = "localhost:3306"

            // MySQL 数据库使用的数据库名称（默认：yggdrasil）
            // 注意：如果数据库不存在请手动创建
            database = "yggdrasil"

            // MySQL 数据库的用户名
            username = "root"

            // MySQL 数据库的密码
            password = ""

            // MySQL 数据库最大连接池数量（默认：10）
            maxPoolSize = 10

            // MySQL 数据库最小空闲连接数量（默认：10）
            minIdleConnections = 10

            // MySQL 数据库连接的最大寿命（毫秒）（默认：30分钟）
            maxLifetime = 1800000

            // MySQL 数据库连接的超时时间（毫秒）（默认：5秒）
            connectionTimeout = 5000

            // 自定义 MySQL 属性
            // 当然更多，格式：属性名 = 值
            // 例如，使用万国码字符集：useUnicode = true
            // 例如，使用字符编码：characterEncoding = "utf8"
            useSSL = true
        }
    }

    // 邮件信使的配置
    messager {

        // 邮件信使的方案类型，可用：[Default, SendGrid]
        // 如果不开启此功能，请保持 type = null 即可
        type = null

        // 发送给用户的发件人邮箱地址
        from = "admin@email.com"

        // Default 方案配置
        default {

            // 邮箱 SMTP 服务器地址
            // 例如，QQ：smtp.qq.com
            // 例如，163：smtp.163.com
            // 例如，Gmail：smtp.gmail.com
            // 例如，Hotmail，Outlook：smtp.live.com
            smtp = "smtp.email.com"

            // 邮箱 SMTP 服务器端口
            // 一般来说都是 465，不过有些特殊
            // 比如使用了 25，非 SSL 连接的
            // 当然也有可能是 578
            port = 465

            // 使用 SSL 安全连接，有一些服务器必须开启
            // 例如 QQ，其他都没用过不晓得
            ssl = true

            // 发件人的邮箱密码，或者授权码，或者令牌等等
            // 例如 QQ 的就是生成的授权码
            pwd = ""
        }

        // SendGrid 的方案配置
        sendGrid {

            // SendGrid 的 API 密钥
            // 更多档案请参阅：https://sendgrid.com
            apiKey = ""
        }
    }

    // 应用程序用户设置
    user {

        // 用户的验证码系统功能配置
        // 如果开启此功能，那么必须将 messager 启用
        // 否则注册验证时的验证码功能将不可用
        verifyCode {

            // 是否开启验证码功能（默认：false）
            // 当开启，首先应该 POST /authserver/verify 获取验证码
            // 接着再将用户信息和验证码一起发送到下一个操作中
            enable = false

            // 验证码有效期时间（秒）（默认: 5分钟）
            // 验证码和邮件成键值对，如果二次获取验证码时没有过期
            // 表明之前的验证码依然有效，可以不重新发送邮件等等操作
            timeout = 300

            // 生成的随机验证码长度（默认：6位）
            length = 6
        }

        // 用户注册设置
        registration {

            // 是否启用注册功能（默认：true）
            // See => POST /authserver/register
            enable = true

            // 注册用户的密码验证（正则表达式）
            passwordVerify = "^[\\w]{6,16}$"

            // 密码强度的二次验证（正则表达式）
            // 密码强度至少应该等于或大于密码验证正则值
            // 如果你不想验证强度，请保持 = "^.*$"
            // 默认值：至少七个字符且包含至少一个字母和一个数字 :
            passwordStrengthVerify = "^(?=.*?[A-Za-z])(?=.*?[0-9]).{7,}$"

            // 注册用户的昵称验证 （正则表达式）
            // 默认值：至少3位数，最多16位，包含字母，数字和下划线
            nicknameVerify = "^[\\w]{3,16}$"

            // 是否注册成功后并自动创建一个以用户昵称对应的玩家角色（默认：false）
            // 注意：玩家名关系到游戏内使用的昵称，请注意上面的昵称验证格式
            nicknamePlayer = false
        }

        // 用户令牌设置
        token {

            // 令牌生命周期 （WIP）尚未完全实现
            // |----------------------------------------------------------------------------------------------------------
            // |----- 1. 有效 -----|----- 2. 暂时无效 -----| 3. 完全无效
            // |-------------------------------------------------------------------------------------------------> Time

            // 访问令牌的有效时间（秒）（默认值: 3天）
            // 可以理解，访问令牌在该时间段内是有效的。
            valid = 259200

            // 访问令牌的无效时间（秒）（默认值: 7天）
            // 如果超过上述有效时间且小于当前无效时间，则它处于暂时无效状态。
            // 超过当前无效时间，则完全无效。
            invalid = 604800
        }
    }

    // 应用程序连接器
    // 支持配置多个连接器
    connectors = [
        {
            host = "127.0.0.1"
            port = 9055
        }
    ]
}
