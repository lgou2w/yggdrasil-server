yggdrasil {

    // 配置文件版本 (不要修改)
    version = "${project.version}"

    // Ktor netty 环境配置
    netty {

        // 存储无法立即处理的 ApplicationCall 实例的队列大小（默认：16）
        requestQueueLimit = 16

        // 来自同一 http 管道的并发运行请求数（默认：10）
        runningLimit = 10

        // 不要创建单独的呼叫事件组并重新使用工作组来处理呼叫（默认：false）
        shareWorkGroup = false

        // 向客户端发送响应的超时（以秒为单位）（默认：10秒）
        responseWriteTimeoutSeconds = 10
    }

    // 应用程序存储配置
    storage {

        // 可用的存储类型: [SQLite, MySQL]
        type = "SQLite"

        // 可用的密码加密类型: [Raw, Md5, Sha1, Sha256, Sha512, SaltedMd5, SaltedSha1, SaltedSha256, SaltedSha512]
        passwordEncryption = "SaltedSha1"

        // SQLite 数据库配置
        sqlite {

            // SQLite 数据库文件路径
            database = "yggdrasil.db"
        }

        // MySQL 数据库配置
        mysql {

            // MySQL 数据库协同程序的线程数量（默认：5）
            threads = 5

            // MySQL 数据库的线程池名称
            poolName = null

            // MySQL 数据库的连接地址：主机:端口
            address = "localhost:3306"

            // MySQL 数据库使用的数据库名称（默认：yggdrasil）
            // 注意：如果数据库不存在请手动创建
            database = "yggdrasil"

            // MySQL 数据库的用户名
            username = "root"

            // MySQL 数据库的密码
            password = ""

            // MySQL 数据库最大连接池数量（默认：10）
            maxPoolSize = 10

            // MySQL 数据库最小空闲连接数量（默认：10）
            minIdleConnections = 10

            // MySQL 数据库连接的最大寿命（毫秒）（默认：30分钟）
            maxLifetime = 1800000

            // MySQL 数据库连接的超时时间（毫秒）（默认：5秒）
            connectionTimeout = 5000

            // 自定义 MySQL 属性
            // 当然更多，格式：属性名 = 值
            // 例如，使用万国码字符集：useUnicode = true
            // 例如，使用字符编码：characterEncoding = "utf8"
            useSSL = true
        }
    }

    // 应用程序用户设置
    user {

        // 用户注册设置
        registration {

            // 是否启用注册功能（默认：true）
            // See => POST /authserver/register
            enable = true

            // 注册用户的密码验证（正则表达式）
            passwordVerify = "^[\\w]{6,16}$"

            // 密码强度的二次验证（正则表达式）
            // 密码强度至少应该等于或大于密码验证正则值
            // 如果你不想验证强度，请保持 = "^.*$"
            // 默认值：至少七个字符且包含至少一个字母和一个数字 :
            passwordStrengthVerify = "^(?=.*?[A-Za-z])(?=.*?[0-9]).{7,}$"

            // 注册用户的昵称验证 （正则表达式）
            // 默认值：至少3位数，最多16位，包含字母，数字和下划线
            nicknameVerify = "^[\\w]{3,16}$"

            // 是否注册成功后并自动创建一个以用户昵称对应的玩家角色（默认：false）
            // 注意：玩家名关系到游戏内使用的昵称，请注意上面的昵称验证格式
            nicknamePlayer = false

            // 是否开启注册时的验证码功能（默认：true）
            // 当开启，首先应该 POST /authserver/registerVerify 获取验证码
            // 接着再将用户注册信息和验证码一起 POST /authserver/register 中
            verifyCode = true

            // 验证码有效期时间（秒）（默认: 5分钟）
            // 验证码和注册邮件成键值对，如果二次获取验证码时没有过期
            // 表明之前的验证码依然有效，可以不重新发送邮件等等操作
            verifyCodeTimeout = 300

            // 验证码有效验证格式（正则表达式）
            // 默认值：只能 6 位且包含字母，数字
            verifyCodeVerify = "^[A-Za-z0-9]{6,6}$"
        }

        // 用户令牌设置
        token {

            // 令牌生命周期 （WIP）尚未完全实现
            // |----------------------------------------------------------------------------------------------------------
            // |----- 1. 有效 -----|----- 2. 暂时无效 -----| 3. 完全无效
            // |-------------------------------------------------------------------------------------------------> Time

            // 访问令牌的有效时间（秒）（默认值: 3天）
            // 可以理解，访问令牌在该时间段内是有效的。
            valid = 259200

            // 访问令牌的无效时间（秒）（默认值: 7天）
            // 如果超过上述有效时间且小于当前无效时间，则它处于暂时无效状态。
            // 超过当前无效时间，则完全无效。
            invalid = 604800
        }
    }

    // 应用程序连接器
    // 支持配置多个连接器
    connectors = [
        {
            host = "127.0.0.1"
            port = 9055
        }
    ]
}
